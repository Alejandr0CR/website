---
import Layout from "../../../layouts/Layout.astro";
import Footer from "../../../components/Footer.astro";
import NavBarTop from "../../../components/NavBarTop.astro";
import postsList from "../../../data/laboratories";

const post = postsList.find(
  (post) => post.slug === "despliegue-django-nginx-asgi",
);
---

<Layout
  theme="dark"
  title=`${post?.title} | Laboratorio | Alejandro Carrasco Rodríguez`
>
  <NavBarTop theme="dark" active="blog" />

  <div class="pt-3">
    <header class="mx-auto mb-4 reader">
      <section class="no-selectable bg-black rounded-4 text-light">
        <div class="py-3">
          <h1 class="d-block text-center h4">Laboratorio</h1>
        </div>
      </section>
    </header>

    <main class="mx-auto mb-5 h-100 reader">
      <section class="mb-5 py-3 rounded-4">

        <h1 class="mb-4 text-primary text-center h2">
          {post?.title}
        </h1>

        <p class="d-block mb-5 text-justify fs-5"></p>

        <h2 class="mb-4 text-primary h4">¿Por qué usar Nginx?</h2>

        <p class="d-block mb-5 text-justify fs-5">
          Nginx es actualmente uno de los servidores web con más
          características. Es un servidor web de alto rendimiento con múltiples
          casos de uso. Para una aplicación escalable y con diferentes tipos de
          servicios, Nginx es una excelente opción.
        </p>

        <h2 class="mb-4 text-primary h4">
          ¿Por qué usar ASGI y por qué con Uvicorn?
        </h2>

        <p class="d-block mb-5 text-justify fs-5">
          ASGI es la forma de ejecutar Python asíncrono en un servidor web. ASGI
          es compatible con HTTP y WebSockets, lo que permite que Django tenga
          funcionalidades en tiempo real. Para implementar ASGI en tu proyecto,
          debes usar una herramienta como Uvicorn.
        </p>

        <h2 class="mb-4 text-primary h4">
          Crear usuario que controlará los recursos de la aplicación
        </h2>

        <ol class="d-block mb-5 text-justify fs-5">
          <li class="mb-5">
            Inicia sesión como <b>usuario root</b> en el servidor.
          </li>
          <li class="mb-5">
            Crea un usuario con su respectivo directorio personal usando el
            comando
            <code
              class="d-block bg-dark my-1 p-2 rounded-2 text-white text-start"
            >
              useradd djangouser -g www-data -s /bin/bash -m -d /home/djangouser
            </code>
            <ul>
              <li><b>djangouser</b> es el nombre del usuario que se creará.</li>
              <li>
                <b>www-data</b> es el grupo al que pertenecerá el usuario.
              </li>
              <li><b>/bin/bash</b> es la shell que usará el usuario.</li>
              <li>
                <b>/home/djangouser</b> es el directorio personal del usuario.
              </li>
            </ul>
          </li>
          <li>
            Crea una contraseña para el usuario creado usando el comando
            <code
              class="d-block bg-dark my-1 p-2 rounded-2 text-white text-start"
            >
              passwd djangouser
            </code>
            A continuación, el sistema te pedirá que ingreses la contraseña dos veces.
          </li>
        </ol>

        <h2 class="mb-4 text-primary h4">
          Instalar aplicación y configurar directorios
        </h2>

        <ol class="d-block mb-5 text-justify fs-5">
          <li class="mb-5">
            Inicia sesión como el usuario <b>djangouser</b> en el servidor.
          </li>
          <li class="mb-5">
            Descarga el proyecto usando el comando
            <code
              class="d-block bg-dark my-1 p-2 rounded-2 text-white text-start"
            >
              git clone https://example.com/djangoapp.git
            </code>
            <ul>
              <li>
                <b>https://example.com/djangoapp.git</b> es la URL del repositorio,
                recuerda reemplazarla por la URL del repositorio de tu proyecto.
              </li>
              <li>
                Puedes usar el repositorio
                <a
                  class="text-primary"
                  href="https://github.com/virtualitems/djangoapp.git"
                  target="_blank"
                >
                  https://github.com/virtualitems/djangoapp.git
                </a>
                para probar el laboratorio.
              </li>
            </ul>
          </li>
          <li class="mb-5">
            Accede al directorio del proyecto usando el comando
            <code
              class="d-block bg-dark my-1 p-2 rounded-2 text-white text-start"
            >
              cd djangoapp
            </code>
            <ul>
              <li>
                <b>djangoapp</b> es el nombre del directorio del proyecto que se
                crea al clonar el repositorio.
              </li>
            </ul>
          </li>
          <li class="mb-5">
            Crea un entorno virtual dentro del directorio del proyecto usando el
            comando
            <code
              class="d-block bg-dark my-1 p-2 rounded-2 text-white text-start"
            >
              python3 -m venv venv
            </code>
            <ul>
              <li>
                El último <b>venv</b> es el nombre del directorio que se creará para
                el entorno virtual.
              </li>
            </ul>
          </li>
          <li class="mb-5">
            Actualiza el gestor de paquetes <i>pip</i> usando el comando
            <code
              class="d-block bg-dark my-1 p-2 rounded-2 text-white text-start"
            >
              venv/bin/pip3 install --upgrade pip
            </code>
            <ul>
              <li>
                Nótese que a partir de este punto <b
                  >debes usar los binarios del entorno virtual</b
                > y no los del sistema siempre que sea posible.
              </li>
              <li>
                Es posible usar sólo el nombre del binario sin escribir la ruta
                relativa al "activar" el entorno virtual usando el comando <code
                  >source venv/bin/activate</code
                >
              </li>
            </ul>
          </li>
          <li class="mb-5">
            Instala las dependencias del proyecto usando el comando
            <code
              class="d-block bg-dark my-1 p-2 rounded-2 text-white text-start"
            >
              venv/bin/pip3 install -r requirements.txt
            </code>
          </li>
          <li class="mb-5">
            Instala las dependencias de ejecución usando el comando
            <code
              class="d-block bg-dark my-1 p-2 rounded-2 text-white text-start"
            >
              venv/bin/pip3 install uvicorn[standard] gunicorn
            </code>
            <ul>
              <li>
                <b>uvicorn</b> es un servidor web ASGI que será el intermediario
                entre Django y Nginx
              </li>
              <li>
                <b>gunicorn</b> es un servidor web HTTP con workers optimizados que
                uvicorn puede importar.
              </li>
            </ul>
          </li>
          <li class="mb-5">
            Crea un archivo de configuración para gunicorn usando el comando
            <code
              class="d-block bg-dark my-1 p-2 rounded-2 text-white text-start"
            >
              vim gunicorn.conf.py
            </code>
            <ul class="mb-2">
              <li>
                El comando <code>vim</code> puede ser reemplazado por el editor de
                tu preferencia.
              </li>
            </ul>
            <span class="mb-4 h5">
              El contenido del archivo debe ser el siguiente:
            </span>
            <div>
              <iframe
                frameborder="0"
                scrolling="no"
                style="width:100%; height:475px;"
                allow="clipboard-write"
                src="https://emgithub.com/iframe.html?target=https%3A%2F%2Fgithub.com%2Fvirtualitems%2Fdjangoapp%2Fblob%2Fstage1%2Fgunicorn.conf.py&style=dark&type=code&showLineNumbers=on&showFileMeta=on&showCopy=on"
              ></iframe>
            </div>
          </li>
        </ol>

        <h2 class="mb-4 text-primary h4">Probemos el proyecto hasta ahora</h2>

        <ol class="d-block mb-5 text-justify fs-5">
          <li class="mb-5">
            Comprueba la configuración de gunicorn usando el comando
            <code
              class="d-block bg-dark my-1 p-2 rounded-2 text-white text-start"
            >
              venv/bin/python3 -m gunicorn -c gunicorn.conf.py --check-config
              djangoapp.asgi:application
            </code>
            <ul>
              <li>
                Si la configuración es correcta, el comando no mostrará ningún
                mensaje.
              </li>
            </ul>
          </li>

          <li class="mb-5">
            Verifica la configuración que está tomando el gunicorn con el
            comando
            <code
              class="d-block bg-dark my-1 p-2 rounded-2 text-white text-start"
            >
              venv/bin/python3 -m gunicorn -c gunicorn.conf.py --print-config
              djangoapp.asgi:application
            </code>
          </li>

          <li class="mb-5">
            Inicia el proyecto usando el comando
            <code
              class="d-block bg-dark my-1 p-2 rounded-2 text-white text-start"
            >
              venv/bin/python3 -m gunicorn -c gunicorn.conf.py
              djangoapp.asgi:application
            </code>
          </li>
          <li class="mb-5">
            Accede a la IP del servidor de pruebas provisto por el uvicorn
            usando un navegador web
          </li>
        </ol>
      </section>
    </main>
  </div>

  <Footer />
</Layout>

<style>
  li b {
    white-space: pre-line;
    word-break: break-word;
  }
  ol li {
    list-style: decimal;
  }
  ul li {
    list-style: disc;
  }
</style>
